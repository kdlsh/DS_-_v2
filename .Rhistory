install.packages(forecast)
install.packages(ggplot2)
library(forecast)
library(ggplot2)
install.packages(forecast)
install.packages('forecast')
install.packages('forecast')
install.packages(ggplot2)
install.packages('ggplot2')
library(forecast)
library(ggplot2)
plot(AirPassengers)
AP <- AirPassengers
par(mfrow=c(2,1))
plot(aggregate(AP), ylab = "Passengers")
boxplot(AP~cycle(AP), ylab = "Passengers")
class(AP) # check if AP is ts
cycle(AP) # check the frequency
aggregate(AP) # summation for every cycle
AP.time <- time(AP) # X-axis = time
Reg <- lm(AP~AP.time) # Regression
plot(AP)
abline(Reg)
Reg <- lm(AP~AP.time) # Regression
plot(AP)
abline(Reg)
decompose(AP)
plot(decompose(AP))
install.packages('prophet')
install.packages('dplyr')
install.packages('Rtools')
library(prophet)
library(dplyr)
df <- read.csv("D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_peyton_manning.csv",
sep=",", header=T) %>%
mutate(y = log(y))
df_ms <- df[1:2540,]
df_ts <- df[2541:2905,]
m <- prophet(df_ms)
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
# plot for trend & weeekly/yearly seasonality
prophet_plot_components(m, forecast)
yhat <- exp(forecast$yhat[(2905-364):2905])
mean(100-100*abs(as.numeric(yhat)-as.numeric(exp(df_ts$y)))/as.numeric(exp(df_ts$y)))
df <- read.csv("D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_R.csv",
sep=",", header=T) %>%
mutate(y = log(y))
df$cap <- 8.5
m <- prophet(df, growth = 'logistic')
future <- make_future_dataframe(m, periods = 1826)
future$cap <- 8.5
fcst <- predict(m, future)
plot(m, fcst);
df <- read.csv("D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_R.csv",
sep=",", header=T) %>%
mutate(y = log(y))
df$y <- 10 - df$y
df$cap <- 6
df$floor <- 1.5
future$cap <- 6
future$floor <- 1.5
m <- prophet(df, growth = 'logistic')
fcst <- predict(m, future)
plot(m, fcst)
df <- read.csv("D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_peyton_manning.csv",
sep=",", header=T) %>%
mutate(y = log(y))
m <- prophet(weekly.seasonality=FALSE)
m <- add_seasonality(m, name='monthly', period=30.5, fourier.order=5)
m <- fit.prophet(m, df)
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
prophet_plot_components(m, forecast)
df <- read.csv("D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_peyton_manning.csv",
sep=",", header=T) %>%
mutate(y = log(y))
m <- prophet(weekly.seasonality=FALSE)
m <- add_seasonality(m, name='monthly', period=30.5, fourier.order=5)
m <- fit.prophet(m, df)
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
prophet_plot_components(m, forecast)
library(dplyr)
playoffs <- data_frame(
holiday = 'playoff',
ds = as.Date(c('2008-01-13', '2009-01-03', '2010-01-16',
'2010-01-24', '2010-02-07', '2011-01-08',
'2013-01-12', '2014-01-12', '2014-01-19',
'2014-02-02', '2015-01-11', '2016-01-17',
'2016-01-24', '2016-02-07')),
lower_window = 0,
upper_window = 1
)
superbowls <- data_frame(
holiday = 'superbowl',
ds = as.Date(c('2010-02-07', '2014-02-02', '2016-02-07')),
lower_window = 0,
upper_window = 1
)
holidays <- bind_rows(playoffs, superbowls)
m <- prophet(df, holidays = holidays)
forecast <- predict(m, future)
forecast %>%
select(ds, playoff, superbowl) %>%
filter(abs(playoff + superbowl) > 0) %>%
tail(10)
# components plot for holiday effects
prophet_plot_components(m, forecast);
df <- read.table('D:/workspace/FasCampus_Quant/3.r금융데이터/3.[R 금융데이터]/DataSet/example_wp_peyton_manning.csv', sep=",", header=T) %>%
mutate(y = log(y))
m <- prophet(df)
df.cv <- cross_validation(m, horizon = 365, units = 'days')
head(df.cv)
df.cv$cutoff <- as.Date(df.cv$cutoff)  # 'POSIXct' format -> 'Date' format
unique(df.cv$cutoff) # view cutoffs
filter(df.cv, cutoff=="2011-01-19") # view a forecst for specific Date
install.packages('changepoint')
install.packages('')
install.packages('glmnet')
install.packages("glmnet", repos = "http://cran.us.r-project.org")
installed.packages("glmnet")
install.packages("glmnet", dependencies=TRUE)
install.packages("glmnet", repos = "http://cran.us.r-project.org")
getwd()
setwd("C:\Users\kdlsh\Desktop\DS_사전과제_v2")
setwd("C:/Users/kdlsh/Desktop/DS_사전과제_v2")
